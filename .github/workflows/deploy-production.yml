name: Deploy to Production and GitHub Release
on:
  push:
    branches: ["main"]

jobs:
  fingerprint:
    name: Generate Fingerprint
    runs-on: ubuntu-latest
    outputs:
      android_fingerprint_hash: ${{ steps.fingerprint.outputs.android_fingerprint_hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          path: .

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Install EAS CLI
        run: pnpm add -g eas-cli

      - name: Authenticate EAS
        run: echo "${{ secrets.EXPO_TOKEN }}" | eas login

      - name: Generate fingerprint
        id: fingerprint
        run: |
          FINGERPRINT=$(eas build:fingerprint --platform android --profile production --json)
          FINGERPRINT_HASH=$(echo $FINGERPRINT | jq -r '.fingerprint')
          echo "android_fingerprint_hash=$FINGERPRINT_HASH" >> $GITHUB_OUTPUT

  get_android_build:
    name: Check for Existing Android Build
    needs: [fingerprint]
    runs-on: ubuntu-latest
    outputs:
      build_id: ${{ steps.get_build.outputs.build_id }}
      build_url: ${{ steps.get_build.outputs.build_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          path: .

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Install EAS CLI
        run: pnpm add -g eas-cli

      - name: Authenticate EAS
        run: echo "${{ secrets.EXPO_TOKEN }}" | eas login

      - name: Get build
        id: get_build
        run: |
          RESULT=$(eas build:list --platform android --profile production --fingerprint ${{ needs.fingerprint.outputs.android_fingerprint_hash }} --json --limit 1)
          BUILD_ID=$(echo $RESULT | jq -r '.[0].id // ""')
          BUILD_URL=$(echo $RESULT | jq -r '.[0].artifacts.buildUrl // ""')
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
          echo "build_url=$BUILD_URL" >> $GITHUB_OUTPUT

  build_android:
    name: Build Android
    needs: [get_android_build]
    if: ${{ !needs.get_android_build.outputs.build_id }}
    runs-on: ubuntu-latest
    outputs:
      build_id: ${{ steps.produce_build.outputs.build_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          path: .

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Install EAS CLI
        run: pnpm add -g eas-cli

      - name: Authenticate EAS
        run: echo "${{ secrets.EXPO_TOKEN }}" | eas login

      - name: Produce build
        id: produce_build
        run: |
          RESULT=$(eas build --platform android --profile production --non-interactive --json)
          BUILD_ID=$(echo $RESULT | jq -r '.id')
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT

  publish_android_update:
    name: Publish Android Update
    needs: [get_android_build]
    if: ${{ needs.get_android_build.outputs.build_id }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          path: .

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Install EAS CLI
        run: pnpm add -g eas-cli

      - name: Authenticate EAS
        run: echo "${{ secrets.EXPO_TOKEN }}" | eas login

      - name: Publish update
        run: eas update --branch production --platform android

  create_github_release:
    name: Create GitHub Release
    needs: [get_android_build, build_android]
    runs-on: ubuntu-latest
    if: ${{ needs.build_android.outputs.build_id != '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          path: .

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Install EAS CLI
        run: pnpm add -g eas-cli

      - name: Authenticate EAS
        run: echo "${{ secrets.EXPO_TOKEN }}" | eas login

      - name: Wait for build to complete
        run: |
          BUILD_ID=${{ needs.build_android.outputs.build_id }}
          while true; do
            STATUS=$(eas build:view $BUILD_ID --json | jq -r '.status')
            if [ "$STATUS" == "finished" ]; then
              break
            elif [ "$STATUS" == "errored" ]; then
              echo "Build errored"
              exit 1
            fi
            echo "Build status: $STATUS, waiting..."
            sleep 30
          done

      - name: Get build info
        id: build_info
        run: |
          BUILD_ID=${{ needs.build_android.outputs.build_id }}
          BUILD_INFO=$(eas build:view $BUILD_ID --json)
          BUILD_URL=$(echo $BUILD_INFO | jq -r '.artifacts.buildUrl')
          APP_VERSION=$(echo $BUILD_INFO | jq -r '.appVersion')
          BUILD_VERSION=$(echo $BUILD_INFO | jq -r '.buildVersion')
          echo "build_url=$BUILD_URL" >> $GITHUB_OUTPUT
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
          echo "build_version=$BUILD_VERSION" >> $GITHUB_OUTPUT

      - name: Download APK
        run: |
          curl -L "${{ steps.build_info.outputs.build_url }}" -o next-pushup-${{ steps.build_info.outputs.app_version }}.apk

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.build_info.outputs.app_version }}-${{ steps.build_info.outputs.build_version }}
          name: Release v${{ steps.build_info.outputs.app_version }} (Build ${{ steps.build_info.outputs.build_version }})
          body: |
            New Android build released

            Version: ${{ steps.build_info.outputs.app_version }}
            Build: ${{ steps.build_info.outputs.build_version }}
          files: |
            next-pushup-${{ steps.build_info.outputs.app_version }}.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
